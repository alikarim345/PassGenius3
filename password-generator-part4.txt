// PASSWORD GENERATOR - PART 4: EVENT HANDLERS

  const handleGeneratePassword = useCallback(() => {
    try {
      const newPassword = generatePassword(options);
      setPassword(newPassword);
      setShowBulkResults(false);
      toast({
        title: "Password Generated",
        description: "New secure password has been generated successfully.",
      });
    } catch (error) {
      toast({
        title: "Generation Error",
        description: "Please select at least one character type.",
        variant: "destructive",
      });
    }
  }, [options, generatePassword, toast]);

  const handleCopyPassword = useCallback(async (passwordToCopy: string = password) => {
    if (!passwordToCopy) {
      toast({
        title: "No Password",
        description: "Please generate a password first.",
        variant: "destructive",
      });
      return;
    }

    try {
      await navigator.clipboard.writeText(passwordToCopy);
      toast({
        title: "Copied!",
        description: "Password copied to clipboard successfully.",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Failed to copy password. Please try again.",
        variant: "destructive",
      });
    }
  }, [password, toast]);

  const handleClearPassword = useCallback(() => {
    setPassword("");
    setBulkPasswords([]);
    setShowBulkResults(false);
    toast({
      title: "Cleared",
      description: "Password fields have been cleared.",
    });
  }, [toast]);